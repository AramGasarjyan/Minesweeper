//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/InputSettings/MinesweeperInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MinesweeperInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MinesweeperInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MinesweeperInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""6d82dc91-fb32-42db-90a0-579cbf5b16e7"",
            ""actions"": [
                {
                    ""name"": ""Reveal"",
                    ""type"": ""Button"",
                    ""id"": ""9d57fda7-9e88-41c4-94e0-8f897ab06558"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flag"",
                    ""type"": ""Button"",
                    ""id"": ""5f97f59e-8645-49c3-a329-a1865a6f64f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""8d903d2d-0fdc-4ece-beec-859fbcf7d880"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d0e89759-3da7-42cf-b779-1cf66336f8db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5061ff66-d6b1-495f-9e17-bbedce3acfbc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reveal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38f640fc-86e1-497f-9a45-d8b44b08b650"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25c15046-f3f9-489d-a649-4656a084167c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d95bd5b6-3127-43f3-b297-6fe2c352b86b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIMap"",
            ""id"": ""b51bee60-011b-4942-b1f9-74217e0e67bf"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""173f0958-8c0c-49b0-b1db-aba9a56b22e1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12f3d3e4-34a4-4d47-a6bd-3870ddaf51d3"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Reveal = m_Gameplay.FindAction("Reveal", throwIfNotFound: true);
        m_Gameplay_Flag = m_Gameplay.FindAction("Flag", throwIfNotFound: true);
        m_Gameplay_Restart = m_Gameplay.FindAction("Restart", throwIfNotFound: true);
        m_Gameplay_PointerPosition = m_Gameplay.FindAction("PointerPosition", throwIfNotFound: true);
        // UIMap
        m_UIMap = asset.FindActionMap("UIMap", throwIfNotFound: true);
        m_UIMap_Restart = m_UIMap.FindAction("Restart", throwIfNotFound: true);
    }

    ~@MinesweeperInputActions()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, MinesweeperInputActions.Gameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UIMap.enabled, "This will cause a leak and performance issues, MinesweeperInputActions.UIMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Reveal;
    private readonly InputAction m_Gameplay_Flag;
    private readonly InputAction m_Gameplay_Restart;
    private readonly InputAction m_Gameplay_PointerPosition;
    public struct GameplayActions
    {
        private @MinesweeperInputActions m_Wrapper;
        public GameplayActions(@MinesweeperInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reveal => m_Wrapper.m_Gameplay_Reveal;
        public InputAction @Flag => m_Wrapper.m_Gameplay_Flag;
        public InputAction @Restart => m_Wrapper.m_Gameplay_Restart;
        public InputAction @PointerPosition => m_Wrapper.m_Gameplay_PointerPosition;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Reveal.started += instance.OnReveal;
            @Reveal.performed += instance.OnReveal;
            @Reveal.canceled += instance.OnReveal;
            @Flag.started += instance.OnFlag;
            @Flag.performed += instance.OnFlag;
            @Flag.canceled += instance.OnFlag;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Reveal.started -= instance.OnReveal;
            @Reveal.performed -= instance.OnReveal;
            @Reveal.canceled -= instance.OnReveal;
            @Flag.started -= instance.OnFlag;
            @Flag.performed -= instance.OnFlag;
            @Flag.canceled -= instance.OnFlag;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // UIMap
    private readonly InputActionMap m_UIMap;
    private List<IUIMapActions> m_UIMapActionsCallbackInterfaces = new List<IUIMapActions>();
    private readonly InputAction m_UIMap_Restart;
    public struct UIMapActions
    {
        private @MinesweeperInputActions m_Wrapper;
        public UIMapActions(@MinesweeperInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_UIMap_Restart;
        public InputActionMap Get() { return m_Wrapper.m_UIMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIMapActions set) { return set.Get(); }
        public void AddCallbacks(IUIMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UIMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIMapActionsCallbackInterfaces.Add(instance);
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
        }

        private void UnregisterCallbacks(IUIMapActions instance)
        {
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
        }

        public void RemoveCallbacks(IUIMapActions instance)
        {
            if (m_Wrapper.m_UIMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UIMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIMapActions @UIMap => new UIMapActions(this);
    public interface IGameplayActions
    {
        void OnReveal(InputAction.CallbackContext context);
        void OnFlag(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
    }
    public interface IUIMapActions
    {
        void OnRestart(InputAction.CallbackContext context);
    }
}
